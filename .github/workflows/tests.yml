name: Tests for my name

on:
  push:
    branches:
      - A01751941


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with coverage to check for my name
      run: |
            RUN_ENV=dev 
            coverage run -m pytest python3/test/
            coverage report
            coverage html -d cc_report/

  package:
    runs-on: ubuntu-latest
    needs: test
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
            
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
            
      - name: Create deployment package
        run: |
          cd python3/src
          zip -r ../my-deployment-package.zip .
            
      - name: Upload deployment package
        uses: actions/upload-artifact@v2
        with:
          name: my-deployment-package
          path: my-deployment-package.zip

  dockerize:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
          
      - name: Build and tag image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: latest
        with:
          context: ./python3
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Read artifact
        uses: actions/download-artifact@v3
        env:
          IMAGE_TAG: latest
        with:
          name: my-deployment-package
          path: /tmp
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Deploy image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: latest
        run: |
          docker load --input /tmp/my-deployment-package.zip
          docker image ls -a
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          
