name: CDCI Workflow

on:
  push:
    branches: ['A01029956']
  # pull_request:
  #   branches: ['*']

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r python3/requirements.txt
      - name: Test with pytest
        run: |
          export PYTHONPATH=src
          coverage run -m pytest python3/tests/
          coverage report
          coverage html -d coverage_html/

  package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        run: pip install -r python3/requirements.txt
      - name: Package
        run: zip app.zip src/app.py # Package the app.py file

  dockerize:
    runs-on: ubuntu-latest
    needs: package

    steps:
      - name: Dockerize
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cdci:latest
          build-args: |
            RUN_ENV=prod

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize

    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/ubuntu/cdci
            docker-compose down
            docker-compose up -d