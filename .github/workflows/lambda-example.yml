# This workflow

name: Lamba Example Exercise

on:
  push:
    branches: ["*" ]
  pull_request:
    branches: ["*"]

jobs:
    # This job will lint the code and make a build of the express application
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                    node-version: '18.x'
            - name: Install dependencies
              working-directory: ./lambda
              run: npm install
            #- run: npm ci Generally faster
            # - name: Lint code
            #   working-directory: ./app
            #   run: npm run lint:fix
    test:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                    node-version: '18.x'
            - name: Test code
              working-directory: ./lambda
              run: |
                npm install
                npm run test
    # # This job will run the unit tests
    # package:
    # # This job will package the application into a zip file
    dockerize:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: AKIAYC6YPCILQO3JWL6W
                aws-secret-access-key: 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
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public
            - name: Build and tag image
              uses: docker/build-push-action@v4
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
                IMAGE_TAG: A01029746
              with:
                context: ./lambda
                tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
            - name: Save image
              uses: actions/upload-artifact@v3
              env:
                IMAGE_TAG: A01029746
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp/${{ env.IMAGE_TAG }}.tar
    
    deploy:
        runs-on: ubuntu-latest
        needs: dockerize
        steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Read artifact
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: A01029746
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: AKIAYC6YPCILQO3JWL6W
                aws-secret-access-key: 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
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with:
                registry-type: public
            - name: Deploy image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
                IMAGE_TAG: A01029746
              run: |
                docker load --input /tmp/$IMAGE_TAG.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    # # This job will build the docker image
    # deploy:
    # # This job will deploy the docker image to AWS ECR
    # run:
    # # This job will run the docker image in a AWS lambda function