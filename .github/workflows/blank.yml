# This is a basic workflow to help you get started with Actions

name: Application workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
    
permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3

  #     # Runs a single command using the runners shell
  #     - name: Set up python3
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.10"
      
  #     # Install dependecies
  #     - name: Install dependecies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 pytest
  #         if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
          
  #     # flake 8
  #     - name: Lint with flake8
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      

  # test:

  #   runs-on: ubuntu-latest
  #   needs: build

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3

  #     # Runs a single command using the runners shell
  #     - name: Set up python3
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.10"
      
  #     # Install dependecies
  #     - name: Install dependecies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 pytest
  #         if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
    

  #     #Py test
  #     - name: Test with pytest
  #       run: |
  #           RUN_ENV=dev 
  #           coverage run -m pytest python3/test/
  #           coverage report
  #           coverage html -d cc_report/
  # Package:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Zip source code
  #       run: zip -r lambda_package.zip python3/src

  # Dockerize:
  #   runs-on: ubuntu-latest
  #   needs: Package
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         registry-type: public
  #     - name: Build and tag image
  #       uses: docker/build-push-action@v4
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
  #         IMAGE_TAG: latest
  #       with:
  #         context: ./python3
  #         tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
  #         outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
  #     - name: Save image
  #       uses: actions/upload-artifact@v3
  #       env:
  #         IMAGE_TAG: latest
  #       with:
  #         name: ${{ env.IMAGE_TAG }}
  #         path: /tmp/${{ env.IMAGE_TAG }}.tar
          
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: Dockerize
  #   # This are the deply steps in the file
  #   # 1. Set up Docker Buildx
  #   # 2. Read artifact
  #   # 3. Configure AWS credentials
  #   # 4. Login to Amazon ECR
  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Read artifact
  #       uses: actions/download-artifact@v3
  #       env:
  #         IMAGE_TAG: latest
  #       with:
  #         name: ${{ env.IMAGE_TAG }}
  #         path: /tmp
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         registry-type: public
  #     - name: Deploy image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
  #         IMAGE_TAG: latest
  #       run: |
  #         docker load --input /tmp/$IMAGE_TAG.tar
  #         docker image ls -a
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #   outputs:
  #     ecr_registry: ${{ steps.login-ecr.outputs.registry }}
  
  run:
    runs-on: ubuntu-latest
    # needs: deploy

    env:
      ECR_REPOSITORY: test
      IMAGE_TAG: latest
      AWS_REGION: us-east-1
      PUBLIC_ECR_REPO: d0z3f1c0/demo-repository-ecr

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Private ECR Repository
        id: create-repo
        run: |
          set +e
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ env.AWS_REGION }} > /dev/null 2>&1
          exit_code=$?
          set -e
          if [ $exit_code -eq 0 ]; then
            echo "Private ECR repository already exists"
          else
            aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ env.AWS_REGION }}
          fi

      - name: Fetch Private Repository URI
        id: get-private-repo-uri
        run: |
          repository_uri=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ env.AWS_REGION }} --query 'repositories[0].repositoryUri' --output text)
          echo "::set-output name=private_repo_uri::$repository_uri"
          
      - name: Docker Login
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.get-private-repo-uri.outputs.private_repo_uri }}:$IMAGE_TAG
      
      # - name: Create private ecr image
      #   run: |
      #     docker pull public.ecr.aws/${{ env.PUBLIC_ECR_REPO }}:$IMAGE_TAG
      #     docker tag public.ecr.aws/${{ env.PUBLIC_ECR_REPO }}:$IMAGE_TAG ${{ steps.get-private-repo-uri.outputs.private_repo_uri }}:$IMAGE_TAG
      #     docker push ${{ steps.get-private-repo-uri.outputs.private_repo_uri }}:$IMAGE_TAG
      # # workpls

      - name: Create Role if Not Exist
        id: create-role
        run: |
          ROLE_NAME=my-lambda-role
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          if [ -z "$ROLE_ARN" ]; then
            ROLE_ARN=$(aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }' --query 'Role.Arn' --output text)
            echo "Created IAM role: $ROLE_ARN"
          else
            echo "IAM role already exists: $ROLE_ARN"
          fi
          echo "::set-output name=role_arn::$ROLE_ARN"

      - name: Wait for Role to be Created
        run: |
          role_arn=${{ steps.create-role.outputs.role_arn }}
          aws iam wait role-exists --role-name $(basename $role_arn)
          aws iam wait role-arn-exists --role-arn $role_arn
          aws iam wait role-activation-complete --role-name $(basename $role_arn)

      - name: Check if Lambda Function Exists
        id: check-function-existence
        run: |
          FUNCTION_NAME=test
          FUNCTION_ARN=$(aws lambda list-functions --query "Functions[?FunctionName=='$FUNCTION_NAME'].FunctionArn" --output text)
          if [ -z "$FUNCTION_ARN" ]; then
            echo "Lambda function does not exist"
            echo "::set-output name=function_exists::false"
          else
            echo "Lambda function already exists"
            echo "::set-output name=function_exists::true"
          fi
      
      - name: Create or Update Lambda function
        run: |
          if [ "${{ steps.check-function-existence.outputs.function_exists }}" = "false" ]; then
            echo "Creating Lambda function"
            aws lambda create-function \
              --function-name test \
              --package-type Image \
              --code ImageUri=${{ steps.get-private-repo-uri.outputs.private_repo_uri }}:$IMAGE_TAG \
              --role ${{ steps.create-role.outputs.role_arn }} \
              --region ${{ env.AWS_REGION }}
          else
            echo "Updating Lambda function"
            aws lambda update-function-code \
              --function-name test \
              --image-uri ${{ steps.get-private-repo-uri.outputs.private_repo_uri }}:$IMAGE_TAG \
              --region ${{ env.AWS_REGION }}
          fi

      - name: Print Lambda function URL
        run: |
          function_name=test
          function_arn=$(aws lambda get-function --function-name $function_name --region ${{ env.AWS_REGION }} --query 'Configuration.FunctionArn' --output text)
          pre_signed_url=$(aws lambda create-function-url-config --function-name $function_name --region ${{ env.AWS_REGION }} --query 'PreSignedUrlConfig.PreSignedUrl' --output text)
          echo "Lambda function URL: $pre_signed_url"
