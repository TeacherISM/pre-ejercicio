# This is a basic workflow to help you get started with Actions

name: Application workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
    
permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Set up python3
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      
      # Install dependecies
      - name: Install dependecies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
          
      # flake 8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      

  test:

    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Set up python3
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      
      # Install dependecies
      - name: Install dependecies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
    

      #Py test
      - name: Test with pytest
        run: |
            RUN_ENV=dev 
            coverage run -m pytest python3/test/
            coverage report
            coverage html -d cc_report/
  Package:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Zip source code
        run: zip -r lambda_package.zip python3/src

  Dockerize:
    runs-on: ubuntu-latest
    needs: Package
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Build and tag image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01751912
        with:
          context: ./python3
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
      - name: Save image
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: A01751912
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar
          
  deploy:
    runs-on: ubuntu-latest
    needs: Dockerize
    # This are the deply steps in the file
    # 1. Set up Docker Buildx
    # 2. Read artifact
    # 3. Configure AWS credentials
    # 4. Login to Amazon ECR
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Read artifact
        uses: actions/download-artifact@v3
        env:
          IMAGE_TAG: A01751912
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Deploy image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01751912
        run: |
          docker load --input /tmp/$IMAGE_TAG.tar
          docker image ls -a
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
  
  run:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Retrieve Account ID and User Type
        id: get_account_info
        run: |
          ACCOUNT_INFO=$(aws sts get-caller-identity --query '[Account, Arn]' --output json)
          AWS_ACCOUNT_ID=$(echo $ACCOUNT_INFO | jq -r '.[0]')
          IAM_USER_ARN=$(echo $ACCOUNT_INFO | jq -r '.[1]')
          if [[ $IAM_USER_ARN == *"root"* ]]; then
            USER_TYPE="root"
          else
            USER_TYPE="IAM user"
          fi
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          echo "User Type: $USER_TYPE"
          echo "::set-output name=aws_account_id::$AWS_ACCOUNT_ID"
          echo "::set-output name=user_type::$USER_TYPE"
  
      - name: Create Lambda function
        env:
          ECR_REGISTRY: ${{ needs.deploy.outputs.ecr_registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01751912
        run: |
          if [[ "${{ steps.get_account_info.outputs.user_type }}" == "root" ]]; then
            IAM_ROLE_ARN="arn:aws:iam::${{ steps.get_account_info.outputs.aws_account_id }}:root"
          else
            # Handle IAM user case accordingly
            IAM_ROLE_ARN="arn:aws:iam::${{ steps.get_account_info.outputs.aws_account_id }}:role/lambda-role"
          fi
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Image URI: $IMAGE_URI"
          echo "IAM Role ARN: $IAM_ROLE_ARN"
          aws lambda create-function --function-name MyLambdaFunction --runtime python3.8 --handler app.lambda_handler --role $IAM_ROLE_ARN --code ImageUri=$IMAGE_URI --region us-east-1 > lambda_output.txt
  
      - name: Print Lambda function link
        run: |
          LAMBDA_ARN=$(cat lambda_output.txt | jq -r '.FunctionArn')
          echo "Lambda function link: https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions/$LAMBDA_ARN"