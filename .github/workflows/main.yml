name: Build | Test | Package | Dockerize | Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f A01025076/requirements.txt ]; then pip install -r A01025076/requirements.txt; fi
      - name: Lint
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r A01025076/requirements.txt

      - name: Install pytest
        run: pip install pytest

      - name: Run tests
        run: |
          export PYTHONPATH=src
          coverage run -m pytest A01025076/tests/
          coverage report
          coverage html -d A01025076/cc_report/
    
  package:
    name: Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          pip install -r A01025076/requirements.txt

      - name: Package
        run: zip A01025076/app.zip A01025076/src/app.py

      - name: Publish ZIP artifact
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: A01025076/app.zip

  
  dockerize:
    name: Dockerize
    runs-on: ubuntu-latest
    needs: package
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
  
      - name: Build and tag image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01025076
        with:
          context: ./A01025076
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
  
      - name: Save image
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: A01025076
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /A01025076/tmp/${{ env.IMAGE_TAG }}.tar
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Read artifact
        uses: actions/download-artifact@v3
        env:
          IMAGE_TAG: A01025076
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /A01025076/tmp
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Deploy image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01025076
        run: |
          docker load --input /tmp/$IMAGE_TAG.tar
          docker image ls -a
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG