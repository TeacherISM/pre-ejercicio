# Worklow for Build, Test, Package, Deploy, and Run

name: Python app

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [" *"]

permissions:
  contents: read
#   packages: write

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Python 3.10
              uses: actions/setup-python@v3
              with:
                python-version: "3.10"
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flake8 pytest
                if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
            - name: Lint with flake8
              run: |
                # stop the build if there are Python syntax errors or undefined names
                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    test:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Python 3.10
              uses: actions/setup-python@v3
              with:
                python-version: "3.10"
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flake8 pytest
                if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
            - name: Test with pytest
              run: |
                RUN_ENV=dev
                coverage run -m pytest python3/test
                coverage report
                coverage html -d cc_report/

    package:
        needs: test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up Python 3.10
              uses: actions/setup-python@v3
              with:
                python-version: "3.10"
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flake8 pytest
                if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
            - name: Package
              run: zip -r lambda.zip python3/src -x '*.git*'
            
    dockerize:
        needs: package
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with: 
                registry-type: public
            - name: Build, and tag image
              uses: docker/build-push-action@v2
              env: 
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
                IMAGE_TAG: latest-ggp
              with:
                context: ./python3
                tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
                outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
            - name: Save image
              uses: actions/upload-artifact@v3
              env:
                IMAGE_TAG: latest-ggp
              with:
                name: ${{ env.IMAGE_TAG }}
                path: /tmp/${{ env.IMAGE_TAG }}.tar

    deploy:
        needs: dockerize
        runs-on: ubuntu-latest
        steps:
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Read artifact
              uses: actions/download-artifact@v3
              env:
                IMAGE_TAG: latest-ggp
              with:
                name: ${{env.IMAGE_TAG}}
                path: /tmp
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              with: 
                registry-type: public
            - name: Deploy image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
                IMAGE_TAG: latest-ggp
              run: |
                docker load --input /tmp/${{ env.IMAGE_TAG }}.tar
                docker image ls -a
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    run:
        needs: deploy
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
            - name: Get ECR login
              id: ecr-login
              run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/d0z3f1c0/demo-repository-ecr
            - name: Pull image from ECR
              run: docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/d0z3f1c0/demo-repository-ecr:latest-ggp
            - name: Update Lambda function
              run: |
                IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/d0z3f1c0/demo-repository-ecr:latest-ggp
                LAMBDA_FUNCTION_NAME=lambda-a01029422-ggp

                aws lambda update-function-code \
                  --region us-east-1 \
                  --function-name $LAMBDA_FUNCTION_NAME \
                  --image-uri $IMAGE_URI
    # run:
    #     needs: deploy
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Create Lambda function
    #           run: |
    #             aws lambda create-function \
    #             --function-name A01029422 \
    #             --runtime python3.10 \
    #             --zip-file fileb://lambda.zip \
    #             --handler index.handler \
    #             --runtime python3.10 \
    #             --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-role







