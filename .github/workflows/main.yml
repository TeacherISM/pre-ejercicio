name: Python App CI/CD Pipeline

on:
  push:
    branches: ["A01781631"]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Linting
        run: pylint your_app.py

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: python -m unittest discover

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Package generation
        run: python your_package_generation_script.py

  dockerize:
    name: Dockerize
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker setup
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build -t your_docker_image:latest .

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push your_docker_image:latest

  run:
    name: Run
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: your_aws_region

      - name: Create AWS Lambda function
        run: aws lambda create-function --function-name your_lambda_function --image-uri your_docker_image:latest --role your_lambda_execution_role --handler your_lambda_handler --package-type Image
